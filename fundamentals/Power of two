"""
Instructions:
Complete the function power_of_two/powerOfTwo (or equivalent, depending on your language) that determines if a given non-negative integer is a power of two. From the corresponding Wikipedia entry:

    a power of two is a number of the form 2n where n is an integer, i.e. the result of exponentiation with number two as the base and integer n as the exponent.

You may assume the input is always valid.
Examples

power_of_two(1024) ==> True
power_of_two(4096) ==> True
power_of_two(333)  ==> False

Beware of certain edge cases - for example, 1 is a power of 2 since 2^0 = 1 and 0 is not a power of 2.
"""


"""
Sample Tests:
test.assert_equals(power_of_two(0), False)
test.assert_equals(power_of_two(1), True)
test.assert_equals(power_of_two(2), True)
test.assert_equals(power_of_two(5), False)
test.assert_equals(power_of_two(6), False)
test.assert_equals(power_of_two(4096), True)
"""


#Solution:
def power_of_two(num):
    return bin(num).count('1') == 1

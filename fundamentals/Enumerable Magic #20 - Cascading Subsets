/*Instructions :
Create a method each_cons that accepts a list and a number n, and returns cascading subsets of the list of size n, like so:

each_cons([1,2,3,4], 2)
  #=> [[1,2], [2,3], [3,4]]

each_cons([1,2,3,4], 3)
  #=> [[1,2,3],[2,3,4]]
  

As you can see, the lists are cascading; ie, they overlap, but never out of order.*/



/*Sample Tests :

import codewars_test as test
from solution import each_cons
@test.describe("Test Cases")
def test_group():
    @test.it('Should return cascading lists of 1 element')
    def test_case1():
        lst = [3, 5, 8, 13]
        test.assert_equals(each_cons(lst, 1), [[3], [5], [8], [13]])      
    @test.it('Should return cascading lists of 2 elements')
    def test_case2():
        lst = [3, 5, 8, 13]
        test.assert_equals(each_cons(lst, 2), [[3,5], [5,8], [8,13]])
        
    @test.it('Should return cascading lists of 3 elements')
    def test_case3():
        lst = [3, 5, 8, 13]
        test.assert_equals(each_cons(lst, 3), [[3,5,8], [5,8,13]])
        
    @test.it('empty list should return an empty list')
    def test_case4():
        lst = [3, 5, 8, 13]
        test.assert_equals(each_cons([], 3), [])*/



//Solution:
def each_cons(lst, n):
    return [lst[i:i+n] for i in range(len(lst) - n + 1)]
